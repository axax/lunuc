var devMode = process.env.NODE_ENV !== 'production' && process.argv.indexOf('-p') === -1

var path = require('path')
var webpack = require('webpack')

/* generate sources */
const appConfig = require('./config.json')
const extensionFolder = './extensions/'
const fs = require('fs')
const gensrcHeader = '/* this file was generated by webpack.config.js */\r\n\r\n'

/* generete source for extensions */
try {
    fs.mkdirSync('./gensrc')
} catch (err) {
    if (err.code !== 'EEXIST') throw err
}

fs.readdir(extensionFolder, (err, files) => {
    if (err) {
        return console.log(err)
    }

    var clientContent = gensrcHeader, serverContent = gensrcHeader, manifestJson = {}

    files.forEach(file => {
        if (fs.statSync(extensionFolder + file).isDirectory()) {
            if (appConfig.extensions && appConfig.extensions.indexOf(file) >= 0) {

                if (fs.existsSync(extensionFolder + file + '/manifest.json')) {
                    manifestJson[file] = JSON.parse(fs.readFileSync(extensionFolder + file + '/manifest.json', 'utf8'));
                } else {
                    manifestJson[file] = {name: file}
                }

                if (fs.existsSync(extensionFolder + file + '/client.js')) {
                    clientContent += `import '.${extensionFolder}${file}/client.js'\r\n`
                }
                if (fs.existsSync(extensionFolder + file + '/server.js')) {
                    serverContent += `import '.${extensionFolder}${file}/server.js'\r\n`
                }
            }
        }
    })

    const manifestStr = `${gensrcHeader}
    const extensions=${JSON.stringify(manifestJson, null, 4)}
    export default extensions
    `

    fs.writeFile("./gensrc/extensions.js", manifestStr, function (err) {
        if (err) {
            return console.log(err)
        }
    })

    fs.writeFile("./gensrc/extensions-client.js", clientContent, function (err) {
        if (err) {
            return console.log(err)
        }
    })
    fs.writeFile("./gensrc/extensions-server.js", serverContent, function (err) {
        if (err) {
            return console.log(err)
        }
    })
})

/* generate ui source */
const uiContent = `${gensrcHeader}export * from 'client/components/ui/impl/${appConfig.ui || 'material'}/index'`

fs.writeFile("./gensrc/ui.js", uiContent, function (err) {
    if (err) {
        return console.log(err)
    }
})

/* generate config */
const configContent = `${gensrcHeader}
export const APOLLO_CACHE=${appConfig.apollo_cache || true}
export const DEBUG=${appConfig.debug || true}
`

fs.writeFile("./gensrc/config.js", configContent, function (err) {
    if (err) {
        return console.log(err)
    }
})


var config = {
    entry: './client/index.js',
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: '[name].bundle.js'
    },
    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
                query: {
                    presets: ['env', 'react', 'stage-0']
                }
            },
            {
                test: /\.css$/,
                use: ['style-loader', 'css-loader']
            },
            {
                test: /\.less$/,
                use: ['style-loader', 'css-loader', 'less-loader']
            }
        ]
    },
    plugins: [

        /*new webpack.optimize.CommonsChunkPlugin({
         name: 'draftjs',
         minChunks: (m) => /node_modules\/(draft-js|immutable)/.test(m.context)
         })*/
        new webpack.optimize.CommonsChunkPlugin({
            name: 'vendor',
            minChunks: (m) => /node_modules/.test(m.context)
        })
    ]
}

/**
 *  Developer / Debug Config
 */
if (devMode) {
    console.log('Build for developing')


    const PORT = (process.env.PORT || 8080)
    const API_PORT = (process.env.API_PORT || 3000)

    config.devServer = {
        historyApiFallback: true,
        inline: true,
        hot: true,
        port: PORT,
        host: '0.0.0.0',
        proxy: {
            '/graphql': {target: `http://0.0.0.0:${API_PORT}`},
            '/ws': {
                target: `ws://localhost:${API_PORT}`,
                ws: true
            }
        }
    }

    /* For Debugging porpuses */
    config.devtool = 'eval'

    config.plugins.push(new webpack.HotModuleReplacementPlugin())

} else {
    console.log('Build for production')


    config.plugins.push(
        new webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false,
                drop_debugger: true,
                drop_console: true
            }
        }),
        new webpack.optimize.AggressiveMergingPlugin()
    )

    const CopyWebpackPlugin = require('copy-webpack-plugin')
    config.plugins.push(
        new CopyWebpackPlugin([
            {from: 'serviceworker.js', to: 'serviceworker.js'}
        ])
    )
    /*var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

     config.plugins.push(new BundleAnalyzerPlugin())*/

    //config.devtool = 'source-map'
}


module.exports = config
/* --port 8080 --hot --host 0.0.0.0 --content-base . */